// <auto-generated />
using System;
using Ambev.DeveloperEvaluation.ORM;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ambev.DeveloperEvaluation.ORM.Migrations
{
    [DbContext(typeof(DefaultContext))]
    [Migration("20250303055555_alter-seed-branches")]
    partial class alterseedbranches
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Branches", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("719a000b-a7f6-4e32-804d-4ed567839194"),
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8432),
                            Location = "Rua das Flores, 123, Centro",
                            Name = "Loja Centro"
                        },
                        new
                        {
                            Id = new Guid("1814b34e-46a6-4391-bdc1-52cda86d7bea"),
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8436),
                            Location = "Avenida Comercial, 456, Shopping Central",
                            Name = "Shopping Outlet"
                        },
                        new
                        {
                            Id = new Guid("2f522b1a-51fe-455e-9d69-222bf92217dc"),
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8463),
                            Location = "Rua Inovação, 789, Distrito Tecnológico",
                            Name = "Tech Hub"
                        },
                        new
                        {
                            Id = new Guid("25b5f452-fb82-43ee-9f40-74e977b50ae7"),
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8465),
                            Location = "Avenida das Palmeiras, 321, Bairro Residencial",
                            Name = "Loja Suburbana"
                        },
                        new
                        {
                            Id = new Guid("5c7f164f-ade7-4339-ab6c-0d2551056459"),
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8468),
                            Location = "Terminal 1, Aeroporto Internacional",
                            Name = "Quiosque Aeroporto"
                        },
                        new
                        {
                            Id = new Guid("46cd5abb-4845-4c5c-88aa-af012da953ed"),
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8470),
                            Location = "Praça Acadêmica, Avenida Universidade",
                            Name = "Loja Universitária"
                        },
                        new
                        {
                            Id = new Guid("7a58335e-3d28-4456-a4e9-eefba8e087b7"),
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8472),
                            Location = "Parque Corporativo, 500, Área de Negócios",
                            Name = "Loja Empresarial"
                        },
                        new
                        {
                            Id = new Guid("397de9e9-385d-4d57-ad0f-fdeecf4367f6"),
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8473),
                            Location = "Avenida Beira-Mar, 100, Região Costeira",
                            Name = "Outlet Praia"
                        },
                        new
                        {
                            Id = new Guid("89ef0106-8170-42b9-8717-1b71ef01b742"),
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8475),
                            Location = "Rua das Montanhas, 200, Região Serrana",
                            Name = "Loja Serra"
                        },
                        new
                        {
                            Id = new Guid("703d4ab5-f449-43c1-a5af-4c584519a1d0"),
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8477),
                            Location = "Rua das Fábricas, 600, Polo Industrial",
                            Name = "Loja Industrial"
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Color")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("72b6ca90-3899-4e64-8109-cae66471e7d9"),
                            Color = "Silver",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8367),
                            Description = "High-performance laptop",
                            Name = "Laptop",
                            Size = "15-inch"
                        },
                        new
                        {
                            Id = new Guid("382bd8dd-694c-4ea6-bbf6-0899d7d6e3b3"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8377),
                            Description = "Ergonomic wireless mouse",
                            Name = "Wireless Mouse",
                            Size = "Medium"
                        },
                        new
                        {
                            Id = new Guid("ed29c524-d21a-4931-8429-6290aae8fd59"),
                            Color = "White",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8379),
                            Description = "RGB backlit keyboard",
                            Name = "Mechanical Keyboard",
                            Size = "Full-size"
                        },
                        new
                        {
                            Id = new Guid("fd4c745b-f827-4f24-b7e3-9f03e451b216"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8381),
                            Description = "144Hz refresh rate monitor",
                            Name = "Gaming Monitor",
                            Size = "27-inch"
                        },
                        new
                        {
                            Id = new Guid("f68858cb-0012-4d3b-8c1e-528d88d1f825"),
                            Color = "Grey",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8382),
                            Description = "Multiport adapter",
                            Name = "USB-C Hub",
                            Size = "Compact"
                        },
                        new
                        {
                            Id = new Guid("f94b7f60-59ef-4d20-aff4-b9d4aa17375d"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8386),
                            Description = "1TB storage drive",
                            Name = "External Hard Drive",
                            Size = "Portable"
                        },
                        new
                        {
                            Id = new Guid("3df71f32-41d9-495a-a4d5-6de2e3267a1b"),
                            Color = "Blue",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8387),
                            Description = "Latest model smartphone",
                            Name = "Smartphone",
                            Size = "6-inch"
                        },
                        new
                        {
                            Id = new Guid("784b6c86-f861-4491-911b-b32d923f37fb"),
                            Color = "Red",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8389),
                            Description = "Portable wireless speaker",
                            Name = "Bluetooth Speaker",
                            Size = "Small"
                        },
                        new
                        {
                            Id = new Guid("3b232215-f9db-4ec8-8ccb-c0eedb255cdf"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8392),
                            Description = "Wireless noise-canceling headphones",
                            Name = "Noise Cancelling Headphones",
                            Size = "Over-ear"
                        },
                        new
                        {
                            Id = new Guid("f4e2ad9c-3a49-4172-95e6-3baaa00df222"),
                            Color = "Silver",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8395),
                            Description = "Water-resistant smartwatch",
                            Name = "Smartwatch",
                            Size = "40mm"
                        },
                        new
                        {
                            Id = new Guid("1cb1c33e-b61e-41a3-9bf1-00e9c77f1cac"),
                            Color = "Gold",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8396),
                            Description = "High-resolution tablet",
                            Name = "Tablet",
                            Size = "10-inch"
                        },
                        new
                        {
                            Id = new Guid("a7011964-1302-4273-925d-956083f4eb8d"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8398),
                            Description = "Professional drawing tablet",
                            Name = "Graphic Tablet",
                            Size = "Large"
                        },
                        new
                        {
                            Id = new Guid("b609d7d6-f493-435e-9cb5-ced331bfaef0"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8399),
                            Description = "1080p HD webcam",
                            Name = "Webcam",
                            Size = "Compact"
                        },
                        new
                        {
                            Id = new Guid("9a67fd7f-699f-4cca-b850-72365e471a39"),
                            Color = "Silver",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8401),
                            Description = "Professional podcast microphone",
                            Name = "Microphone",
                            Size = "Medium"
                        },
                        new
                        {
                            Id = new Guid("296472b3-efb3-4717-81ab-7fc0a933fb83"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8402),
                            Description = "Virtual reality headset",
                            Name = "VR Headset",
                            Size = "Adjustable"
                        },
                        new
                        {
                            Id = new Guid("8f2fe901-4f8e-4dcc-95c2-ec13b92c2eb1"),
                            Color = "White",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8404),
                            Description = "4K camera drone",
                            Name = "Drone",
                            Size = "Portable"
                        },
                        new
                        {
                            Id = new Guid("0a8e6d9c-cbe2-47e5-a2d6-d7c02578eab8"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8407),
                            Description = "Fast external SSD",
                            Name = "Portable SSD",
                            Size = "500GB"
                        },
                        new
                        {
                            Id = new Guid("55f91750-93a8-4082-87d1-53619cd95ecd"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8409),
                            Description = "High-speed HDMI cable",
                            Name = "HDMI Cable",
                            Size = "6ft"
                        },
                        new
                        {
                            Id = new Guid("6fd02cec-014d-419a-a139-bdc12b330ad6"),
                            Color = "White",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8411),
                            Description = "Fast charging pad",
                            Name = "Wireless Charger",
                            Size = "Small"
                        },
                        new
                        {
                            Id = new Guid("065180de-a748-4f05-a9a1-1c3f1a94575f"),
                            Color = "Red",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8412),
                            Description = "Ergonomic gaming chair",
                            Name = "Gaming Chair",
                            Size = "Large"
                        },
                        new
                        {
                            Id = new Guid("a34634fd-4f72-457f-9ddb-2d2e4b44d4e0"),
                            Color = "Multi-color",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8414),
                            Description = "WiFi-enabled LED bulb",
                            Name = "Smart Bulb",
                            Size = "Standard"
                        },
                        new
                        {
                            Id = new Guid("51500140-a4b7-43e5-819c-c8481e2df466"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8415),
                            Description = "10000mAh fast-charging power bank",
                            Name = "Portable Power Bank",
                            Size = "Compact"
                        },
                        new
                        {
                            Id = new Guid("fd99adee-3310-4d52-b669-6e2285162918"),
                            Color = "Blue",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8417),
                            Description = "Activity tracking smartwatch",
                            Name = "Fitness Tracker",
                            Size = "Medium"
                        },
                        new
                        {
                            Id = new Guid("8ee900b3-8e1a-468c-abba-8486f970f2f1"),
                            Color = "Silver",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8419),
                            Description = "Automatic drip coffee maker",
                            Name = "Coffee Maker",
                            Size = "Medium"
                        },
                        new
                        {
                            Id = new Guid("1c2317d3-d53f-4393-919e-193592568393"),
                            Color = "White",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8421),
                            Description = "HEPA filter air purifier",
                            Name = "Air Purifier",
                            Size = "Large"
                        },
                        new
                        {
                            Id = new Guid("c2da8b07-0bac-4bfe-9ac1-d11e7a1acf10"),
                            Color = "White",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8423),
                            Description = "Rechargeable electric toothbrush",
                            Name = "Electric Toothbrush",
                            Size = "Small"
                        },
                        new
                        {
                            Id = new Guid("ab7c6a9d-a49b-4459-8a45-a8c75690142f"),
                            Color = "Brown",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8425),
                            Description = "Adjustable height standing desk",
                            Name = "Standing Desk",
                            Size = "Large"
                        },
                        new
                        {
                            Id = new Guid("151f28cf-4448-4961-9241-7d4922331875"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 3, 5, 55, 55, 486, DateTimeKind.Utc).AddTicks(8426),
                            Description = "Smart robotic vacuum cleaner",
                            Name = "Robot Vacuum",
                            Size = "Compact"
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TotalSaleAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Sales", (string)null);
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.SaleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleItems", (string)null);
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sale", b =>
                {
                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.Branch", "Branch")
                        .WithMany("Sales")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.SaleItem", b =>
                {
                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.Sale", "Sale")
                        .WithMany("SaleItems")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Branch", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sale", b =>
                {
                    b.Navigation("SaleItems");
                });
#pragma warning restore 612, 618
        }
    }
}
