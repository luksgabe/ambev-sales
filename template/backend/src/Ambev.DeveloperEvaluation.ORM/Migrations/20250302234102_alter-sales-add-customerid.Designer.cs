// <auto-generated />
using System;
using Ambev.DeveloperEvaluation.ORM;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ambev.DeveloperEvaluation.ORM.Migrations
{
    [DbContext(typeof(DefaultContext))]
    [Migration("20250302234102_alter-sales-add-customerid")]
    partial class altersalesaddcustomerid
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Branches", (string)null);
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Color")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3715e6a5-4949-45bf-b063-6bed9d88e49b"),
                            Color = "Silver",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3758),
                            Description = "High-performance laptop",
                            Name = "Laptop",
                            Size = "15-inch"
                        },
                        new
                        {
                            Id = new Guid("c1f3ea10-fab0-4607-935b-7d3a48d52b05"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3762),
                            Description = "Ergonomic wireless mouse",
                            Name = "Wireless Mouse",
                            Size = "Medium"
                        },
                        new
                        {
                            Id = new Guid("0dfaff99-5cbc-4981-bc98-0a07fe0e691f"),
                            Color = "White",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3763),
                            Description = "RGB backlit keyboard",
                            Name = "Mechanical Keyboard",
                            Size = "Full-size"
                        },
                        new
                        {
                            Id = new Guid("c030303e-6680-43ac-a668-17e8f69074c8"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3765),
                            Description = "144Hz refresh rate monitor",
                            Name = "Gaming Monitor",
                            Size = "27-inch"
                        },
                        new
                        {
                            Id = new Guid("e9bddda2-58ce-4585-8991-07037a353010"),
                            Color = "Grey",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3766),
                            Description = "Multiport adapter",
                            Name = "USB-C Hub",
                            Size = "Compact"
                        },
                        new
                        {
                            Id = new Guid("3b7b9a6e-a7ab-4cf4-b0ea-601f311e80fb"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3768),
                            Description = "1TB storage drive",
                            Name = "External Hard Drive",
                            Size = "Portable"
                        },
                        new
                        {
                            Id = new Guid("1b9716c0-e74c-424c-baca-56bc29b01902"),
                            Color = "Blue",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3769),
                            Description = "Latest model smartphone",
                            Name = "Smartphone",
                            Size = "6-inch"
                        },
                        new
                        {
                            Id = new Guid("74e5ccde-011a-4175-af2f-2c0c78208a7f"),
                            Color = "Red",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3771),
                            Description = "Portable wireless speaker",
                            Name = "Bluetooth Speaker",
                            Size = "Small"
                        },
                        new
                        {
                            Id = new Guid("b2d60212-f025-4ef0-9a2d-ddd052dfb04c"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3832),
                            Description = "Wireless noise-canceling headphones",
                            Name = "Noise Cancelling Headphones",
                            Size = "Over-ear"
                        },
                        new
                        {
                            Id = new Guid("d3c8d06f-20b8-4003-aada-6267e8f4b61b"),
                            Color = "Silver",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3834),
                            Description = "Water-resistant smartwatch",
                            Name = "Smartwatch",
                            Size = "40mm"
                        },
                        new
                        {
                            Id = new Guid("c89e88f5-0a86-49b6-921c-834aa8aa24f3"),
                            Color = "Gold",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3835),
                            Description = "High-resolution tablet",
                            Name = "Tablet",
                            Size = "10-inch"
                        },
                        new
                        {
                            Id = new Guid("f787acca-7b6a-477f-9ec4-9130afb8c6ea"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3837),
                            Description = "Professional drawing tablet",
                            Name = "Graphic Tablet",
                            Size = "Large"
                        },
                        new
                        {
                            Id = new Guid("066e16c4-1a24-4565-a0bf-afadef26e904"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3838),
                            Description = "1080p HD webcam",
                            Name = "Webcam",
                            Size = "Compact"
                        },
                        new
                        {
                            Id = new Guid("babfb123-012c-441e-bc50-d36729ba1ed5"),
                            Color = "Silver",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3840),
                            Description = "Professional podcast microphone",
                            Name = "Microphone",
                            Size = "Medium"
                        },
                        new
                        {
                            Id = new Guid("6f2cee78-b7f5-4e58-8fc0-6129673f702c"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3842),
                            Description = "Virtual reality headset",
                            Name = "VR Headset",
                            Size = "Adjustable"
                        },
                        new
                        {
                            Id = new Guid("f68d124c-2809-4869-bc5e-9db9b99f74d6"),
                            Color = "White",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3843),
                            Description = "4K camera drone",
                            Name = "Drone",
                            Size = "Portable"
                        },
                        new
                        {
                            Id = new Guid("b316ca27-d2d5-40c8-9b8c-e37a18104d73"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3846),
                            Description = "Fast external SSD",
                            Name = "Portable SSD",
                            Size = "500GB"
                        },
                        new
                        {
                            Id = new Guid("220b0871-90c2-44e2-83cc-6c26b865f900"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3848),
                            Description = "High-speed HDMI cable",
                            Name = "HDMI Cable",
                            Size = "6ft"
                        },
                        new
                        {
                            Id = new Guid("4172901e-4cd3-4e32-853a-0b9620a45518"),
                            Color = "White",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3849),
                            Description = "Fast charging pad",
                            Name = "Wireless Charger",
                            Size = "Small"
                        },
                        new
                        {
                            Id = new Guid("5e8a96ae-c3c0-47c0-9f37-1eb0cd490627"),
                            Color = "Red",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3851),
                            Description = "Ergonomic gaming chair",
                            Name = "Gaming Chair",
                            Size = "Large"
                        },
                        new
                        {
                            Id = new Guid("058b0752-09b7-49a1-8139-912e55664b9a"),
                            Color = "Multi-color",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3852),
                            Description = "WiFi-enabled LED bulb",
                            Name = "Smart Bulb",
                            Size = "Standard"
                        },
                        new
                        {
                            Id = new Guid("3ca6e9d8-e125-429a-91da-2ceed0a64bd7"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3854),
                            Description = "10000mAh fast-charging power bank",
                            Name = "Portable Power Bank",
                            Size = "Compact"
                        },
                        new
                        {
                            Id = new Guid("f3e554af-0b38-42f9-bb69-0512dfd23c49"),
                            Color = "Blue",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3856),
                            Description = "Activity tracking smartwatch",
                            Name = "Fitness Tracker",
                            Size = "Medium"
                        },
                        new
                        {
                            Id = new Guid("f3b7e3a4-5f37-4a59-adde-3b7704c74878"),
                            Color = "Silver",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3858),
                            Description = "Automatic drip coffee maker",
                            Name = "Coffee Maker",
                            Size = "Medium"
                        },
                        new
                        {
                            Id = new Guid("f4bd2e67-73aa-4a2f-9a4c-32cc7fc608e6"),
                            Color = "White",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3861),
                            Description = "HEPA filter air purifier",
                            Name = "Air Purifier",
                            Size = "Large"
                        },
                        new
                        {
                            Id = new Guid("f96bcb4c-cbbe-4a7d-8aed-a95e2663f56e"),
                            Color = "White",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3862),
                            Description = "Rechargeable electric toothbrush",
                            Name = "Electric Toothbrush",
                            Size = "Small"
                        },
                        new
                        {
                            Id = new Guid("c03d8ba2-13ac-46d5-b61c-e68828f1d9e5"),
                            Color = "Brown",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3864),
                            Description = "Adjustable height standing desk",
                            Name = "Standing Desk",
                            Size = "Large"
                        },
                        new
                        {
                            Id = new Guid("d8f82ea9-980d-4c3a-b916-a1d5e188ceb7"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 2, 23, 41, 2, 215, DateTimeKind.Utc).AddTicks(3865),
                            Description = "Smart robotic vacuum cleaner",
                            Name = "Robot Vacuum",
                            Size = "Compact"
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TotalSaleAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Sales", (string)null);
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.SaleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleItems", (string)null);
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sale", b =>
                {
                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.Branch", "Branch")
                        .WithMany("Sales")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.SaleItem", b =>
                {
                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.Sale", "Sale")
                        .WithMany("SaleItems")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Branch", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sale", b =>
                {
                    b.Navigation("SaleItems");
                });
#pragma warning restore 612, 618
        }
    }
}
