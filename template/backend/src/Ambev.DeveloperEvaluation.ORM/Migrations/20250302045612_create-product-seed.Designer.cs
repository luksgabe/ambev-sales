// <auto-generated />
using System;
using Ambev.DeveloperEvaluation.ORM;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ambev.DeveloperEvaluation.ORM.Migrations
{
    [DbContext(typeof(DefaultContext))]
    [Migration("20250302045612_create-product-seed")]
    partial class createproductseed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Branches", (string)null);
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Color")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("691a595c-979b-4117-a656-4c498c946f7c"),
                            Color = "Silver",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8554),
                            Description = "High-performance laptop",
                            Name = "Laptop",
                            Size = "15-inch"
                        },
                        new
                        {
                            Id = new Guid("13c46283-10da-44e0-b44f-84d6dfca5897"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8557),
                            Description = "Ergonomic wireless mouse",
                            Name = "Wireless Mouse",
                            Size = "Medium"
                        },
                        new
                        {
                            Id = new Guid("f0edb3cf-ee6f-42e7-a002-c643eef710ac"),
                            Color = "White",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8571),
                            Description = "RGB backlit keyboard",
                            Name = "Mechanical Keyboard",
                            Size = "Full-size"
                        },
                        new
                        {
                            Id = new Guid("9d68bdc5-da53-4042-ac4d-0f65c6a6decd"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8573),
                            Description = "144Hz refresh rate monitor",
                            Name = "Gaming Monitor",
                            Size = "27-inch"
                        },
                        new
                        {
                            Id = new Guid("23b0fee6-a4e6-4fe6-984e-9d3c7de22614"),
                            Color = "Grey",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8575),
                            Description = "Multiport adapter",
                            Name = "USB-C Hub",
                            Size = "Compact"
                        },
                        new
                        {
                            Id = new Guid("e760e129-1ae2-4c47-a6e8-703da7cb66b3"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8576),
                            Description = "1TB storage drive",
                            Name = "External Hard Drive",
                            Size = "Portable"
                        },
                        new
                        {
                            Id = new Guid("26729ca0-ddfc-476a-946c-f50687cc3c6c"),
                            Color = "Blue",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8578),
                            Description = "Latest model smartphone",
                            Name = "Smartphone",
                            Size = "6-inch"
                        },
                        new
                        {
                            Id = new Guid("e5d1ada6-9ebc-4abc-9388-38057ce978b1"),
                            Color = "Red",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8579),
                            Description = "Portable wireless speaker",
                            Name = "Bluetooth Speaker",
                            Size = "Small"
                        },
                        new
                        {
                            Id = new Guid("0f730c46-d76f-482f-a67f-3aeb11b3a97c"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8580),
                            Description = "Wireless noise-canceling headphones",
                            Name = "Noise Cancelling Headphones",
                            Size = "Over-ear"
                        },
                        new
                        {
                            Id = new Guid("4a6395cd-74b9-4cbf-a9a2-c7e639946a3e"),
                            Color = "Silver",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8582),
                            Description = "Water-resistant smartwatch",
                            Name = "Smartwatch",
                            Size = "40mm"
                        },
                        new
                        {
                            Id = new Guid("fd24d499-2871-485d-9dd7-e339f7fcc7bc"),
                            Color = "Gold",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8586),
                            Description = "High-resolution tablet",
                            Name = "Tablet",
                            Size = "10-inch"
                        },
                        new
                        {
                            Id = new Guid("a44a96c5-20c0-4cc4-9c09-e10e37cb97b2"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8587),
                            Description = "Professional drawing tablet",
                            Name = "Graphic Tablet",
                            Size = "Large"
                        },
                        new
                        {
                            Id = new Guid("ab6d67f1-d3dd-4e2a-b6ce-c2d53d6d3d60"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8589),
                            Description = "1080p HD webcam",
                            Name = "Webcam",
                            Size = "Compact"
                        },
                        new
                        {
                            Id = new Guid("a86e183d-03a4-4caf-84d8-818b25f9e67d"),
                            Color = "Silver",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8590),
                            Description = "Professional podcast microphone",
                            Name = "Microphone",
                            Size = "Medium"
                        },
                        new
                        {
                            Id = new Guid("12b9f44b-fc84-4f71-afd3-14be5da09baa"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8591),
                            Description = "Virtual reality headset",
                            Name = "VR Headset",
                            Size = "Adjustable"
                        },
                        new
                        {
                            Id = new Guid("8acfe6a0-bd8f-4cfa-9ab3-876c0e254399"),
                            Color = "White",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8593),
                            Description = "4K camera drone",
                            Name = "Drone",
                            Size = "Portable"
                        },
                        new
                        {
                            Id = new Guid("7ea0aee7-0f0a-4853-ac19-d309631f660e"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8594),
                            Description = "Fast external SSD",
                            Name = "Portable SSD",
                            Size = "500GB"
                        },
                        new
                        {
                            Id = new Guid("4fb77096-3413-48fb-8629-eaf704f3961c"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8596),
                            Description = "High-speed HDMI cable",
                            Name = "HDMI Cable",
                            Size = "6ft"
                        },
                        new
                        {
                            Id = new Guid("fff3db0b-3d6e-49c6-91c7-7da234ea2512"),
                            Color = "White",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8599),
                            Description = "Fast charging pad",
                            Name = "Wireless Charger",
                            Size = "Small"
                        },
                        new
                        {
                            Id = new Guid("9b8345d2-59ef-4b44-8949-7393f027511d"),
                            Color = "Red",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8600),
                            Description = "Ergonomic gaming chair",
                            Name = "Gaming Chair",
                            Size = "Large"
                        },
                        new
                        {
                            Id = new Guid("6f7a0857-3983-476f-96d7-940e3addcdbf"),
                            Color = "Multi-color",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8602),
                            Description = "WiFi-enabled LED bulb",
                            Name = "Smart Bulb",
                            Size = "Standard"
                        },
                        new
                        {
                            Id = new Guid("055a4672-d187-41a2-a196-d294a5d9dbac"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8603),
                            Description = "10000mAh fast-charging power bank",
                            Name = "Portable Power Bank",
                            Size = "Compact"
                        },
                        new
                        {
                            Id = new Guid("616535e1-60ed-44dc-8608-1d475fc1d879"),
                            Color = "Blue",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8605),
                            Description = "Activity tracking smartwatch",
                            Name = "Fitness Tracker",
                            Size = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e5369c49-47b3-43ba-b363-b129ce66ab23"),
                            Color = "Silver",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8606),
                            Description = "Automatic drip coffee maker",
                            Name = "Coffee Maker",
                            Size = "Medium"
                        },
                        new
                        {
                            Id = new Guid("16ba5629-d687-4f58-9bcf-e9b006cc32eb"),
                            Color = "White",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8607),
                            Description = "HEPA filter air purifier",
                            Name = "Air Purifier",
                            Size = "Large"
                        },
                        new
                        {
                            Id = new Guid("0d8eb020-752e-4bc1-b267-25554c268d20"),
                            Color = "White",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8609),
                            Description = "Rechargeable electric toothbrush",
                            Name = "Electric Toothbrush",
                            Size = "Small"
                        },
                        new
                        {
                            Id = new Guid("4f594b9b-5ac7-4086-a50f-dbedcfda1242"),
                            Color = "Brown",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8612),
                            Description = "Adjustable height standing desk",
                            Name = "Standing Desk",
                            Size = "Large"
                        },
                        new
                        {
                            Id = new Guid("d7901d4f-c681-4a89-9d71-a28a7bac3665"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 3, 2, 4, 56, 11, 774, DateTimeKind.Utc).AddTicks(8613),
                            Description = "Smart robotic vacuum cleaner",
                            Name = "Robot Vacuum",
                            Size = "Compact"
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TotalSaleAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Sales", (string)null);
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.SaleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleItems", (string)null);
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sale", b =>
                {
                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.SaleItem", b =>
                {
                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.Sale", "Sale")
                        .WithMany("SaleItems")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sale", b =>
                {
                    b.Navigation("SaleItems");
                });
#pragma warning restore 612, 618
        }
    }
}
